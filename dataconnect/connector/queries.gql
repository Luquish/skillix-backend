# dataconnect/connector/queries.gql

# Estas consultas están diseñadas para ser llamadas por el SDK del cliente (React Native).
# Se asume que el schema.gql define los tipos y relaciones correspondientes.

"""
Obtiene el contenido de un día específico para un plan de aprendizaje.
El usuario debe estar autenticado y ser propietario del plan.
"""
query GetDayContent($learningPlanId: ID!, $dayNumber: Int!) @auth(level: USER) {
  dayContentCollection(
    filter: {
      # La seguridad se refuerza asegurando que el LearningPlan asociado pertenezca al usuario autenticado.
      section: { learningPlan: { id: { eq: $learningPlanId }, userId: { eq_expr: "auth.uid" } } },
      dayNumber: { eq: $dayNumber }
    },
    first: 1
  ) {
    edges {
      node {
        id
        title
        focusArea
        isActionDay
        objectives
        completionStatus
        mainContentItem { # Relación a MainContentItem (tabla)
          id
          title
          textContent # Texto base para lectura y audio
          audioUrl # URL del audio (si está disponible)
          estimatedReadTimeMinutes
          audioDurationSeconds
          funFact
          xp
          keyConcepts { # Objeto JSONB
            term
            definition
            order
          }
        }
        contentBlockItems(orderBy: { field: order, direction: ASC }) { # Relación a ContentBlockItem (tabla)
          id
          blockType
          title
          xp
          order
          estimatedMinutes
          quizDetails { # Objeto JSONB
            quizType
            questions(orderBy: { field: order, direction: ASC }) {
              questionText
              explanation
              order
              trueFalseAnswer
              matchPairsJson
              scenarioText
              options(orderBy: { field: order, direction: ASC }) {
                optionText
                isCorrect
                order
              }
            }
          }
          exerciseDetails { # Objeto JSONB
            exerciseType
            instructions
            exerciseDataJson
          }
        }
        actionTaskItem { # Relación a ActionTaskItem (tabla)
          id
          title
          challengeDescription
          timeEstimateString
          tips
          realWorldContext
          successCriteria
          toviMotivation # Renombrado de skiMotivation
          difficultyAdaptation
          xp
          steps(orderBy: { field: order, direction: ASC }) {
            id
            instruction
            order
          }
        }
      }
    }
  }
}

"""
Obtiene los analytics generados por el LLM para un usuario.
El usuario debe estar autenticado y solo puede solicitar sus propios analytics.
"""
query GetUserAnalytics @auth(level: USER) {
  userAnalyticsCollection(
    filter: { userId: { eq_expr: "auth.uid" } },
    first: 1 # Asumiendo una única entrada de analytics por usuario
  ) {
    edges {
      node {
        id
        overallEngagementScore
        keyInsights
        learningPatterns { # Objeto JSONB
          patternType
          description
          confidence
          recommendations
        }
        optimalLearningTime { # Objeto JSONB
          bestTimeWindowStart
          bestTimeWindowEnd
          reason
          notificationTime
          engagementPrediction
        }
        contentOptimization { # Objeto JSONB
          difficultyAdjustment
          contentTypePreferences
          idealSessionLengthMinutes
          pacingRecommendation
        }
        streakMaintenanceAnalysis { # Objeto JSONB
          riskLevel
          riskFactors
          interventionStrategies
          motivationalApproach
        }
      }
    }
  }
}

"""
Obtiene el progreso general de un usuario, incluyendo su inscripción activa y datos de racha.
Esta es la query principal para que el frontend obtenga el estado actual del usuario.
El usuario debe estar autenticado.
"""
query GetUserProgress @auth(level: USER) {
  # Obtener la inscripción activa del usuario
  enrollmentCollection(
    filter: {
      userId: { eq_expr: "auth.uid" },
      status: { in: [IN_PROGRESS] } # Un usuario solo debería tener una inscripción IN_PROGRESS
    },
    first: 1
  ) {
    edges {
      node {
        id
        status
        currentDayNumber
        totalXpEarned
        learningPlan {
            id
            skillName
            totalDurationWeeks
            # Se pueden añadir más campos del plan si son necesarios en la vista principal
        }
      }
    }
  }
  # Obtener datos de racha del usuario
  streakDataCollection(filter: { userId: { eq_expr: "auth.uid" } }, first: 1) {
    edges {
      node {
        id
        currentStreak
        longestStreak
        lastContributionDate
      }
    }
  }
}


"""
Obtiene mensajes de Tovi (antes Ski) para una situación dada.
El usuario debe estar autenticado.
"""
query GetToviMessages($situation: String!) @auth(level: USER) {
  toviMessageCollection(
    filter: {
      userId: { eq_expr: "auth.uid" },
      situation: { eq: $situation },
      isDelivered: { eq: false } # Opcional: para obtener solo mensajes nuevos
    },
    orderBy: { field: createdAt, direction: DESC },
    first: 5 # Limitar el número de mensajes
  ) {
    edges {
      node {
        id
        situation
        message
        toviEmojiStyle
        animationSuggestion
        createdAt
        isDelivered
      }
    }
  }
}

# Query GetUserActiveLearningPlan eliminada para evitar redundancia.
# El frontend debe usar GetUserProgress para obtener el learningPlanId
# y luego, si necesita la estructura completa del plan, podría llamar a
# una query como GetLearningPlanDetails($planId: ID!) que se podría crear.
# Por ahora, se asume que GetUserProgress y GetDayContent son suficientes para empezar.

"""
Obtiene todas las inscripciones activas y pausadas de un usuario.
Perfecta para poblar un "switcher" de cursos en la UI.
El usuario debe estar autenticado.
"""
query GetUserEnrollments @auth(level: USER) {
  enrollmentCollection(
    filter: {
      userId: { eq_expr: "auth.uid" },
      status: { in: [IN_PROGRESS, PAUSED] }
    },
    orderBy: { field: updatedAt, direction: DESC } # Mostrar el más reciente primero
  ) {
    edges {
      node {
        id
        status
        currentDayNumber
        totalXpEarned
        learningPlan {
          id
          skillName
          # Puedes añadir un campo como 'iconUrl' o 'colorTheme' al LearningPlan si lo necesitas para la UI
        }
      }
    }
  }
}
