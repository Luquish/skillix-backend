# Consultas para la aplicación Skillix.
# Diseñadas para ser llamadas por el SDK del cliente.

# Obtiene el contenido de un día específico para un plan de aprendizaje.
# El usuario debe estar autenticado y ser propietario del plan.
query GetDayContent($learningPlanId: UUID!, $dayNumber: Int!) @auth(level: USER) {
  dayContents(
    where: {
      section: { learningPlan: { id: { eq: $learningPlanId }, userFirebaseUid: { eq_expr: "auth.uid" } } },
      dayNumber: { eq: $dayNumber }
    },
    limit: 1
  ) {
    id
    title
    focusArea
    isActionDay
    objectives
    completionStatus
    mainContentItem_on_dayContent {
      id
      title
      textContent
      audioUrl
      estimatedReadTimeMinutes
      audioDurationSeconds
      funFact
      xp
      keyConcepts_on_mainContentItem {
        concept
        explanation
        emoji
      }
    }
    contentBlockItems_on_dayContent(orderBy: { order: ASC }) {
      id
      blockType
      title
      xp
      order
      estimatedMinutes
      quizDetails {
        id
        description
        quizQuestionDatas_on_quizDetails {
          question
          questionType
          explanation
          quizOptionDatas_on_question {
            optionText
            isCorrect
          }
        }
      }
      exerciseDetails {
        id
        instructions
        exerciseType
        matchPairs_on_exercise {
          prompt
          correctAnswer
        }
      }
    }
    actionTaskItem_on_dayContent {
      id
      title
      challengeDescription
      timeEstimateString
      tips
      realWorldContext
      successCriteria
      toviMotivation
      difficultyAdaptation
      xp
      actionStepItems_on_actionTaskItem(orderBy: { stepNumber: ASC }) {
        stepNumber
        description
        estimatedTimeSeconds
        isCompleted
      }
    }
  }
}

# ACTUALIZADO: Query corregida después de la migración exitosa
# Usa la nueva estructura consolidada de UserAnalytics
query GetUserAnalytics @auth(level: USER) {
  userAnalyticss(
    where: { userFirebaseUid: { eq_expr: "auth.uid" } },
    limit: 1
  ) {
    id
    optimalLearningTimeStart
    optimalLearningTimeEnd
    optimalLearningTimeReasoning
    contentDifficultyRecommendation
    idealSessionLengthMinutes
    streakRiskLevel
    streakInterventionStrategies
    overallEngagementScore
    keyInsights
  }
}

# Obtiene el progreso general de un usuario, incluyendo su inscripción activa y datos de racha.
# Es la query principal para obtener el estado actual del usuario.
query GetUserProgress @auth(level: USER) {
  enrollments(
    where: {
      userFirebaseUid: { eq_expr: "auth.uid" },
      status: { eq: "ACTIVE" }
    },
    limit: 1
  ) {
    id
    status
    enrollmentDate
    learningPlan {
      id
      skillName
      totalDurationWeeks
    }
  }
  streakData(key: { userFirebaseUid: "auth.uid" }) {
    currentStreak
    longestStreak
    lastContributionDate
  }
}

# Obtiene mensajes de Tovi para una situación dada.
query GetToviMessages($situation: String!) @auth(level: USER) {
  toviMessages(
    where: {
      userFirebaseUid: { eq_expr: "auth.uid" },
      situation: { eq: $situation },
      isDelivered: { eq: false }
    },
    orderBy: { createdAt: DESC },
    limit: 5
  ) {
    id
    situation
    message
    toviEmojiStyle
    animationSuggestion
    createdAt
    isDelivered
  }
}

# Obtiene todas las inscripciones (activas y pausadas) de un usuario.
# Perfecta para un "switcher" de cursos en la UI.
query GetUserEnrollments @auth(level: USER) {
  enrollments(
    where: { userFirebaseUid: { eq_expr: "auth.uid" } }
  ) {
    id
    status
    learningPlan {
      id
      skillName
    }
  }
}

# Obtiene todos los planes de aprendizaje de un usuario.
query GetUserLearningPlans @auth(level: USER) {
  learningPlans(
    where: { userFirebaseUid: { eq_expr: "auth.uid" } }
  ) {
    id
    skillName
  }
}

# Obtiene un usuario específico por su firebaseUid.
# Se usa internamente por el backend, por eso no tiene @auth.
query GetUserByFirebaseUid($firebaseUid: String!) @auth(level: NO_ACCESS) {
  user(key: { firebaseUid: $firebaseUid }) {
    firebaseUid
    email
    name
    authProvider
    platform
    photoUrl
    emailVerified
  }
}

# Obtiene la estructura completa de un plan de aprendizaje por su ID.
# Se usa internamente por el backend, por eso no tiene @auth.
query GetLearningPlanStructure($learningPlanId: UUID!) @auth(level: NO_ACCESS) {
  learningPlans(where: { id: { eq: $learningPlanId } }) {
    id
    userFirebaseUid
    skillName
    sections: planSections_on_learningPlan {
      id
      title
      order
      days: dayContents_on_section {
        id
        dayNumber
        title
        focusArea
        isActionDay
        objectives
        completionStatus
      }
    }
    skillAnalysis: skillAnalysis_on_learningPlan {
      skillCategory
      marketDemand
      isSkillValid
      learningPathRecommendation
      realWorldApplications
      complementarySkills
      components: skillComponentDatas_on_skillAnalysis {
        name
        description
        difficultyLevel
        prerequisitesText
        estimatedLearningHours
        practicalApplications
        order
      }
    }
  }
}

# Obtiene los tokens FCM de un usuario.
# Se usa internamente por el backend para notificaciones.
query GetUserFcmTokens($firebaseUid: String!) @auth(level: NO_ACCESS) {
  user(key: { firebaseUid: $firebaseUid }) {
    fcmTokens
  }
}

# Obtiene el plan de aprendizaje activo más reciente del usuario.
# Se usa internamente por el backend, por eso no tiene @auth.
query GetCurrentUserLearningPlan($userFirebaseUid: String!) @auth(level: NO_ACCESS) {
  learningPlans(
    where: { 
      userFirebaseUid: { eq: $userFirebaseUid }
    }
    orderBy: { generatedAt: DESC }
    limit: 1
  ) {
    id
    userFirebaseUid
    skillName
    generatedAt
    totalDurationWeeks
    dailyTimeMinutes
    skillLevelTarget
    milestones
    progressMetrics
    flexibilityOptions
    sections: planSections_on_learningPlan {
      id
      title
      order
      days: dayContents_on_section {
        id
        dayNumber
        title
        focusArea
        isActionDay
        objectives
        completionStatus
      }
    }
    skillAnalysis: skillAnalysis_on_learningPlan {
      skillCategory
      marketDemand
      isSkillValid
      learningPathRecommendation
      realWorldApplications
      complementarySkills
      components: skillComponentDatas_on_skillAnalysis {
        name
        description
        difficultyLevel
        prerequisitesText
        estimatedLearningHours
        practicalApplications
        order
      }
    }
  }
}

# Obtiene los datos de streak del usuario.
# Se usa internamente por el backend, por eso no tiene @auth.
query GetUserStreak($userFirebaseUid: String!) @auth(level: NO_ACCESS) {
  streakData(key: { userFirebaseUid: $userFirebaseUid }) {
    currentStreak
    longestStreak
    lastContributionDate
  }
}

# Calcula el XP total del usuario basado en contenidos completados.
# Se usa internamente por el backend, por eso no tiene @auth.
query CalculateUserXP($userFirebaseUid: String!) @auth(level: NO_ACCESS) {
  # XP de MainContent completado
  mainContentItems(
    where: { 
      dayContent: { 
        section: { 
          learningPlan: { 
            userFirebaseUid: { eq: $userFirebaseUid }
          }
        },
        completionStatus: { eq: "COMPLETED" }
      }
    }
  ) {
    xp
  }
  
  # XP de ActionTasks completadas
  actionTaskItems(
    where: { 
      dayContent: { 
        section: { 
          learningPlan: { 
            userFirebaseUid: { eq: $userFirebaseUid }
          }
        },
        completionStatus: { eq: "COMPLETED" }
      }
    }
  ) {
    xp
  }
  
  # XP de ContentBlocks completados
  contentBlockItems(
    where: { 
      dayContent: { 
        section: { 
          learningPlan: { 
            userFirebaseUid: { eq: $userFirebaseUid }
          }
        },
        completionStatus: { eq: "COMPLETED" }
      }
    }
  ) {
    xp
  }
}

# Obtiene el desglose detallado de XP del usuario.
# Se usa internamente por el backend, por eso no tiene @auth.
query GetUserXPBreakdown($userFirebaseUid: String!) @auth(level: NO_ACCESS) {
  mainContentItems(
    where: { 
      dayContent: { 
        section: { 
          learningPlan: { 
            userFirebaseUid: { eq: $userFirebaseUid }
          }
        },
        completionStatus: { eq: "COMPLETED" }
      }
    }
  ) {
    xp
  }
  
  actionTaskItems(
    where: { 
      dayContent: { 
        section: { 
          learningPlan: { 
            userFirebaseUid: { eq: $userFirebaseUid }
          }
        },
        completionStatus: { eq: "COMPLETED" }
      }
    }
  ) {
    xp
  }
  
  contentBlockItems(
    where: { 
      dayContent: { 
        section: { 
          learningPlan: { 
            userFirebaseUid: { eq: $userFirebaseUid }
          }
        },
        completionStatus: { eq: "COMPLETED" }
      }
    }
  ) {
    xp
  }
}
