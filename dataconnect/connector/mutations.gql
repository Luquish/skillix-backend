# dataconnect/connector/mutations.gql

# --- Input Types para Mutaciones ---

input CreateUserInput {
  firebaseUid: String!
  email: String!
  name: String
  authProvider: AuthProvider! # Usando el enum de enums.gql
  platform: Platform
  photoUrl: String
  emailVerified: Boolean
}

input CreateUserPreferenceInput {
  userId: ID! # ID interno del User, no firebaseUid
  skill: String!
  experienceLevel: UserExperienceLevel!
  motivation: String!
  availableTimeMinutes: Int!
  learningStyle: LearningStyle!
  goal: String!
}

input LearningPlanDailyActivityInput {
  type: String!
  durationMinutes: Int!
  description: String!
  order: Int
}

input LearningPlanResourceInput {
  name: String!
  urlOrDescription: String!
  resourceType: String
  order: Int
}

input CreateSkillComponentInput {
  name: String!
  description: String!
  difficultyLevel: DifficultyLevel!
  prerequisitesText: [String!]!
  estimatedLearningHours: Int!
  practicalApplications: [String!]!
  order: Int!
}

input CreateSkillAnalysisForPlanInput {
  skillName: String!
  skillCategory: SkillCategory!
  marketDemand: MarketDemand!
  isSkillValid: Boolean!
  viabilityReason: String
  learningPathRecommendation: String!
  realWorldApplications: [String!]!
  complementarySkills: [String!]!
  generatedBy: String!
  components: [CreateSkillComponentInput!]
}

input CreateLearningObjectiveInput {
  objective: String!
  measurable: Boolean!
  timeframe: String!
  order: Int!
}

input CreatePedagogicalAnalysisForPlanInput {
  effectivenessScore: Float!
  cognitiveLoadAssessment: String!
  scaffoldingQuality: String!
  engagementPotential: Float!
  recommendations: [String!]!
  assessmentStrategies: [String!]!
  improvementAreas: [String!]!
  generatedBy: String!
  objectives: [CreateLearningObjectiveInput!]
}

input CreatePlanDayInput {
  dayNumber: Int!
  title: String!
  focusArea: String!
  isActionDay: Boolean!
  objectives: [String!]!
  generatedBy: String
  generatedAt: Timestamp
  completionStatus: CompletionStatus # Por defecto PENDING
}

input CreatePlanSectionInput {
  title: String!
  description: String
  order: Int!
  days: [CreatePlanDayInput!]
}

input CreateFullLearningPlanInput {
  userId: ID! # ID interno del User
  skillName: String!
  generatedBy: String!
  generatedAt: Timestamp!
  totalDurationWeeks: Int!
  dailyTimeMinutes: Int!
  skillLevelTarget: UserExperienceLevel!
  milestones: [String!]!
  progressMetrics: [String!]!
  flexibilityOptions: [String!]
  skillAnalysis: CreateSkillAnalysisForPlanInput!
  pedagogicalAnalysis: CreatePedagogicalAnalysisForPlanInput!
  sections: [CreatePlanSectionInput!]
  dailyActivityTemplates: [LearningPlanDailyActivityInput!]
  suggestedResources: [LearningPlanResourceInput!]
}

# --- Input Types para las mutaciones granulares de DayContentDetails ---
input CreateAudioContentForMainInput {
    audioUrl: String!
    transcript: String!
    durationSeconds: Int!
    voiceType: String
}

input CreateKeyConceptForReadInput {
    term: String!
    definition: String!
    order: Int!
}

input CreateReadContentForMainInput {
    contentHtml: String!
    estimatedReadTimeMinutes: Int!
    keyConcepts: [CreateKeyConceptForReadInput!]
}

input CreateMainContentForItemInput { # Usado por InsertMainContent
    dayContentId: ID! # Referencia al DayContent existente
    contentType: MainContentType!
    title: String!
    funFact: String!
    xp: Int!
    audioDetails: CreateAudioContentForMainInput
    readDetails: CreateReadContentForMainInput
}

input CreateQuizOptionForQuestionInput {
    optionText: String!
    isCorrect: Boolean!
    order: Int!
}

input CreateQuizQuestionForQuizContentInput {
    questionText: String!
    explanation: String!
    order: Int!
    trueFalseAnswer: Boolean
    matchPairsJson: String
    scenarioText: String
    options: [CreateQuizOptionForQuestionInput!]
}

input CreateQuizContentForBlockInput {
    quizType: String!
    questions: [CreateQuizQuestionForQuizContentInput!]
}

input CreateExerciseContentForBlockInput {
    exerciseType: String!
    instructions: String!
    exerciseDataJson: String!
}

input CreateContentBlockForDayInput { # Usado por InsertContentBlock
    dayContentId: ID! # Referencia al DayContent existente
    blockType: ContentBlockType!
    title: String!
    xp: Int!
    order: Int!
    estimatedMinutes: Int
    quizDetails: CreateQuizContentForBlockInput
    exerciseDetails: CreateExerciseContentForBlockInput
}

input CreateActionStepForTaskInput {
    instruction: String!
    order: Int!
}

input CreateActionTaskForDayInput { # Usado por InsertActionTask
    dayContentId: ID! # Referencia al DayContent existente
    title: String!
    challengeDescription: String!
    timeEstimateString: String!
    tips: [String!]!
    realWorldContext: String!
    successCriteria: [String!]!
    skiMotivation: String!
    difficultyAdaptation: DifficultyLevel
    xp: Int!
    steps: [CreateActionStepForTaskInput!]
}

input CreateEnrollmentInput {
    userId: ID!
    learningPlanId: ID!
    status: CompletionStatus!
    currentDayNumber: Int!
    totalXpEarned: Int!
}

input CreateChatSessionInput {
  userId: ID!
}

input AddChatMessageInput {
  chatSessionId: ID!
  userId: ID!
  role: String!
  content: String!
}

input UpdateUserProfileInput {
  name: String # Corregido de displayName
  photoUrl: String
  llmKeyInsights: [String!]
  llmOverallEngagementScore: Float
  fcmTokens: [String!]
}

input MarkNotificationAsReadInput {
  notificationId: ID!
}

input UpdateStreakDataInput {
    userId: ID!
    currentStreak_inc: Int
    currentStreak_set: Int
    longestStreak_set: Int
    lastContributionDate_set: Date # Formato "YYYY-MM-DD"
}


# --- Mutaciones ---

"""
Crea un nuevo usuario. Llamada por el backend tras la autenticación de Firebase.
"""
mutation CreateUser($input: CreateUserInput!) @auth(level: NO_ACCESS) {
  user_insert(
    data: {
      firebaseUid: $input.firebaseUid
      email: $input.email
      name: $input.name
      authProvider: $input.authProvider
      platform: $input.platform
      photoUrl: $input.photoUrl
      emailVerified: $input.emailVerified
      isActive: true
    }
  ) {
    id
    firebaseUid
    email
    name
  }
}

"""
Crea las preferencias iniciales para un usuario.
"""
mutation CreateUserPreference($input: CreateUserPreferenceInput!) @auth(level: NO_ACCESS) {
  userPreference_insert(data: $input) {
    id
    userId
    skill
  }
}

"""
Crea un Plan de Aprendizaje completo con todas sus sub-entidades.
Llamada por el backend (LearningPlanner.service.ts).
"""
mutation CreateFullLearningPlan($input: CreateFullLearningPlanInput!) @auth(level: NO_ACCESS) {
  learningPlan_insert(
    data: {
      userId: $input.userId
      skillName: $input.skillName
      generatedBy: $input.generatedBy
      generatedAt: $input.generatedAt
      totalDurationWeeks: $input.totalDurationWeeks
      dailyTimeMinutes: $input.dailyTimeMinutes
      skillLevelTarget: $input.skillLevelTarget
      milestones: $input.milestones
      progressMetrics: $input.progressMetrics
      flexibilityOptions: $input.flexibilityOptions
      skillAnalysis: { create: $input.skillAnalysis }
      pedagogicalAnalysis: { create: $input.pedagogicalAnalysis }
      sections: { create: $input.sections }
      dailyActivityTemplates: { create: $input.dailyActivityTemplates }
      suggestedResources: { create: $input.suggestedResources }
    }
  ) {
    id
    skillName
    user { id }
    skillAnalysis { id }
    pedagogicalAnalysis { id }
    sections { id, days { id, dayNumber } }
  }
}

"""
Inserta el MainContent para un DayContent existente.
Llamada por el backend (ContentGenerator.service.ts como parte de saveDailyContentDetailsInDB).
"""
mutation InsertMainContent($input: CreateMainContentForItemInput!) @auth(level: NO_ACCESS) {
  mainContent_insert(data: $input) {
    id
    dayContentId
    contentType
  }
}

"""
Inserta un ContentBlock (ejercicio, quiz) para un DayContent existente.
Llamada por el backend (ContentGenerator.service.ts como parte de saveDailyContentDetailsInDB).
"""
mutation InsertContentBlock($input: CreateContentBlockForDayInput!) @auth(level: NO_ACCESS) {
  contentBlock_insert(data: $input) {
    id
    dayContentId
    blockType
  }
}

"""
Inserta una ActionTask para un DayContent existente (si es un día de acción).
Llamada por el backend (ContentGenerator.service.ts como parte de saveDailyContentDetailsInDB).
"""
mutation InsertActionTask($input: CreateActionTaskForDayInput!) @auth(level: NO_ACCESS) {
  actionTask_insert(data: $input) {
    id
    dayContentId
    title
  }
}

"""
Crea una inscripción (Enrollment) para un usuario en un plan de aprendizaje.
"""
mutation CreateEnrollment($input: CreateEnrollmentInput!) @auth(level: NO_ACCESS) {
  enrollment_insert(data: $input) {
    id
    userId
    learningPlanId
    status # Añadido
  }
}

"""
Crea una sesión de chat para un usuario.
"""
mutation CreateChatSession($input: CreateChatSessionInput!) @auth(level: NO_ACCESS) {
  chatSession_insert(data: $input) {
    id
    userId
    createdAt
  }
}

"""
Añade un mensaje a una sesión de chat existente.
"""
mutation AddChatMessage($input: AddChatMessageInput!) @auth(level: NO_ACCESS) {
  chatMessage_insert(data: $input) {
    id
    chatSessionId
    role
    content
    createdAt # Añadido
  }
}

"""
Permite al backend actualizar el perfil de un usuario.
"""
mutation UpdateUserProfile($firebaseUid: String!, $input: UpdateUserProfileInput!) @auth(level: NO_ACCESS) {
  user_update(
    where: { firebaseUid: { eq: $firebaseUid } }
    data: $input
  ) {
    firebaseUid
    name # Corregido de displayName
    email
    photoUrl
  }
}

"""
Marca una notificación como leída. El backend debe verificar la pertenencia.
"""
mutation MarkNotificationAsRead($input: MarkNotificationAsReadInput!) @auth(level: NO_ACCESS) {
  notification_update(
    where: { id: { eq: $input.notificationId } }
    data: { isRead: true, updatedAt_expr: "now()" }
  ) {
    id
    isRead
  }
}

"""
Actualiza los datos de racha del usuario.
Llamada por el backend después de una actividad relevante.
"""
mutation UpdateStreakData($input: UpdateStreakDataInput!) @auth(level: NO_ACCESS) {
  streakData_update(
    where: { userId: { eq: $input.userId } }
    data: {
      currentStreak_inc: $input.currentStreak_inc
      currentStreak: $input.currentStreak_set
      longestStreak: $input.longestStreak_set
      lastContributionDate: $input.lastContributionDate_set
    }
  ) {
    id
    userId
    currentStreak
    longestStreak
    lastContributionDate
  }
}
