# ==================== USER MUTATIONS ====================
mutation CreateUser(
  $email: String!
  $name: String!
  $authProvider: AuthProvider!
  $platform: Platform
  $firebaseUid: String!
  $photoUrl: String
  $emailVerified: Boolean
) @auth(level: PUBLIC) {
  createUser(data: {
    email: $email
    name: $name
    authProvider: $authProvider
    platform: $platform
    firebaseUid: $firebaseUid
    photoUrl: $photoUrl
    emailVerified: $emailVerified
  }) {
    id
    email
    name
    firebaseUid
  }
}

mutation UpdateUserAuth(
  $userId: ID!
  $appleUserIdentifier: String
  $appleIdentityToken: String
  $googleIdToken: String
  $googleAccessToken: String
) @auth(level: USER) {
  updateUser(
    where: { id: { eq: $userId } }
    data: {
      appleUserIdentifier: $appleUserIdentifier
      appleIdentityToken: $appleIdentityToken
      googleIdToken: $googleIdToken
      googleAccessToken: $googleAccessToken
      lastSignInAt: "now()"
    }
  ) {
    id
    lastSignInAt
  }
}

mutation CreateUserPreference(
  $userId: ID!
  $skill: String!
  $experienceLevel: UserExperienceLevel!
  $motivation: String!
  $availableTimeMinutes: Int!
  $learningStyle: LearningStyle!
  $goal: String!
) @auth(level: USER) {
  createUserPreference(data: {
    userId: $userId
    skill: $skill
    experienceLevel: $experienceLevel
    motivation: $motivation
    availableTimeMinutes: $availableTimeMinutes
    learningStyle: $learningStyle
    goal: $goal
  }) {
    id
    skill
    experienceLevel
  }
}

# ==================== LEARNING PLAN MUTATIONS ====================
mutation CreateLearningPlanWithAnalysis(
  $userId: ID!
  $generatedBy: String!
  # Skill Analysis
  $skill: String!
  $skillCategory: SkillCategory!
  $marketDemand: MarketDemand!
  # Pedagogical Analysis
  $cognitivLoadAssessment: String!
) @auth(level: SERVICE) @transaction {
  # 1. Create learning plan
  learningPlan: createLearningPlan(data: {
    userId: $userId
    generatedBy: $generatedBy
    generatedAt: "now()"
  }) {
    id
  }
  
  # 2. Create skill analysis
  skillAnalysis: createSkillAnalysis(data: {
    learningPlanId: $learningPlan.id
    skill: $skill
    skillCategory: $skillCategory
    marketDemand: $marketDemand
    generatedBy: $generatedBy
  }) {
    id
  }
  
  # 3. Create pedagogical analysis
  pedagogicalAnalysis: createPedagogicalAnalysis(data: {
    learningPlanId: $learningPlan.id
    cognitivLoadAssessment: $cognitivLoadAssessment
  }) {
    id
  }
}

mutation CreateSkillComponents(
  $skillAnalysisId: ID!
  $components: [SkillComponentInput!]!
) @auth(level: SERVICE) {
  createManySkillComponents(data: $components) {
    id
    name
  }
}

mutation CreateSkillPrerequisites(
  $skillAnalysisId: ID!
  $prerequisites: [SkillPrerequisiteInput!]!
) @auth(level: SERVICE) {
  createManySkillPrerequisites(data: $prerequisites) {
    id
    name
  }
}

mutation CreateCareerPaths(
  $skillAnalysisId: ID!
  $careerPaths: [CareerPathInput!]!
) @auth(level: SERVICE) {
  createManyCareerPaths(data: $careerPaths) {
    id
    title
  }
}

mutation CreateLearningObjectives(
  $pedagogicalAnalysisId: ID!
  $objectives: [LearningObjectiveInput!]!
) @auth(level: SERVICE) {
  createManyLearningObjectives(data: $objectives) {
    id
    objective
  }
}

mutation CreateBloomsTaxonomyLevels(
  $pedagogicalAnalysisId: ID!
  $levels: [BloomsTaxonomyInput!]!
) @auth(level: SERVICE) {
  createManyBloomsTaxonomy(data: $levels) {
    id
    level
    percentage
  }
}

mutation CreatePlanSection(
  $planId: ID!
  $title: String!
  $description: String
  $order: Int!
) @auth(level: SERVICE) {
  createPlanSection(data: {
    planId: $planId
    title: $title
    description: $description
    order: $order
  }) {
    id
  }
}

# ==================== CONTENT MUTATIONS ====================
mutation CreateDayContent(
  $sectionId: ID!
  $dayNumber: Int!
  $title: String!
  $focusArea: String!
  $isActionDay: Boolean!
  $generatedBy: String!
) @auth(level: SERVICE) {
  createDayContent(data: {
    sectionId: $sectionId
    dayNumber: $dayNumber
    title: $title
    focusArea: $focusArea
    isActionDay: $isActionDay
    generatedBy: $generatedBy
    generatedAt: "now()"
  }) {
    id
  }
}

mutation CreateDayObjectives(
  $dayContentId: ID!
  $objectives: [DayObjectiveInput!]!
) @auth(level: SERVICE) {
  createManyDayObjectives(data: $objectives) {
    id
    objective
  }
}

mutation CreateMainContent(
  $dayContentId: ID!
  $contentType: MainContentType!
  $title: String!
  $funFact: String!
  $xp: Int
) @auth(level: SERVICE) {
  createMainContent(data: {
    dayContentId: $dayContentId
    contentType: $contentType
    title: $title
    funFact: $funFact
    xp: $xp
  }) {
    id
  }
}

mutation CreateAudioContent(
  $mainContentId: ID!
  $audioUrl: String!
  $transcript: String!
  $duration: Int!
  $voiceType: String!
) @auth(level: SERVICE) {
  createAudioContent(data: {
    mainContentId: $mainContentId
    audioUrl: $audioUrl
    transcript: $transcript
    duration: $duration
    voiceType: $voiceType
  }) {
    id
  }
}

mutation CreateReadContent(
  $mainContentId: ID!
  $content: String!
  $estimatedReadTime: Int!
) @auth(level: SERVICE) {
  createReadContent(data: {
    mainContentId: $mainContentId
    content: $content
    estimatedReadTime: $estimatedReadTime
  }) {
    id
  }
}

mutation CreateKeyConcepts(
  $readContentId: ID!
  $concepts: [KeyConceptInput!]!
) @auth(level: SERVICE) {
  createManyKeyConcepts(data: $concepts) {
    id
    concept
  }
}

mutation CreateContentBlock(
  $dayContentId: ID!
  $blockType: ContentBlockType!
  $title: String!
  $xp: Int!
  $order: Int!
  $estimatedMinutes: Int
) @auth(level: SERVICE) {
  createContentBlock(data: {
    dayContentId: $dayContentId
    blockType: $blockType
    title: $title
    xp: $xp
    order: $order
    estimatedMinutes: $estimatedMinutes
  }) {
    id
  }
}

mutation CreateQuizContent(
  $contentBlockId: ID!
) @auth(level: SERVICE) {
  createQuizContent(data: {
    contentBlockId: $contentBlockId
  }) {
    id
  }
}

mutation CreateQuizQuestion(
  $quizContentId: ID!
  $question: String!
  $correctAnswer: String!
  $explanation: String!
  $order: Int!
) @auth(level: SERVICE) {
  createQuizQuestion(data: {
    quizContentId: $quizContentId
    question: $question
    correctAnswer: $correctAnswer
    explanation: $explanation
    order: $order
  }) {
    id
  }
}

mutation CreateQuizOptions(
  $questionId: ID!
  $options: [QuizOptionInput!]!
) @auth(level: SERVICE) {
  createManyQuizOptions(data: $options) {
    id
    optionText
    isCorrect
  }
}

mutation CreateActionTask(
  $contentBlockId: ID!
  $taskType: String!
  $description: String!
  $instructions: String!
  $estimatedTime: Int!
) @auth(level: SERVICE) {
  createActionTask(data: {
    contentBlockId: $contentBlockId
    taskType: $taskType
    description: $description
    instructions: $instructions
    estimatedTime: $estimatedTime
  }) {
    id
  }
}

mutation CreateActionSteps(
  $actionTaskId: ID!
  $steps: [ActionStepInput!]!
) @auth(level: SERVICE) {
  createManyActionSteps(data: $steps) {
    id
    instruction
  }
}

mutation CreateActionDeliverables(
  $actionTaskId: ID!
  $deliverables: [ActionDeliverableInput!]!
) @auth(level: SERVICE) {
  createManyActionDeliverables(data: $deliverables) {
    id
    description
  }
}

mutation CreateExerciseContent(
  $contentBlockId: ID!
  $exerciseType: String!
  $instructions: String!
  $exerciseData: String!
) @auth(level: SERVICE) {
  createExerciseContent(data: {
    contentBlockId: $contentBlockId
    exerciseType: $exerciseType
    instructions: $instructions
    exerciseData: $exerciseData
  }) {
    id
  }
}

# ==================== ENROLLMENT & PROGRESS MUTATIONS ====================
mutation CreateEnrollment(
  $userId: ID!
  $learningPlanId: ID!
) @auth(level: USER) {
  createEnrollment(data: {
    userId: $userId
    learningPlanId: $learningPlanId
    startedAt: "now()"
    lastActivityAt: "now()"
  }) {
    id
  }
}

mutation UpdateEnrollmentProgress(
  $enrollmentId: ID!
  $currentDayNumber: Int!
  $totalXpEarned: Int!
) @auth(level: USER) {
  updateEnrollment(
    where: { id: { eq: $enrollmentId } }
    data: {
      currentDayNumber: $currentDayNumber
      totalXpEarned: $totalXpEarned
      lastActivityAt: "now()"
    }
  ) {
    id
    currentDayNumber
    totalXpEarned
  }
}

mutation UpdateContentProgress(
  $userId: ID!
  $contentBlockId: ID!
  $completed: Boolean!
  $xpEarned: Int!
  $timeSpent: Int!
  $score: Float
) @auth(level: USER) {
  upsertContentProgress(
    where: {
      userId: { eq: $userId }
      contentBlockId: { eq: $contentBlockId }
    }
    create: {
      userId: $userId
      contentBlockId: $contentBlockId
      completed: $completed
      xpEarned: $xpEarned
      timeSpent: $timeSpent
      score: $score
      attempts: 1
      completedAt: $completed ? "now()" : null
    }
    update: {
      completed: $completed
      xpEarned: $xpEarned
      timeSpent: { increment: $timeSpent }
      score: $score
      attempts: { increment: 1 }
      completedAt: $completed ? "now()" : null
      updatedAt: "now()"
    }
  ) {
    id
    completed
    xpEarned
  }
}

mutation SaveQuizResponse(
  $progressId: ID!
  $questionId: ID!
  $selectedOptionId: ID!
  $isCorrect: Boolean!
) @auth(level: USER) {
  createQuizResponse(data: {
    progressId: $progressId
    questionId: $questionId
    selectedOptionId: $selectedOptionId
    isCorrect: $isCorrect
  }) {
    id
    isCorrect
  }
}

# ==================== ANALYTICS MUTATIONS ====================
mutation UpdateUserAnalytics(
  $userId: ID!
  $date: Date!
  $totalXp: Int!
  $sessionsCount: Int!
  $averageSessionTime: Int!
  $blocksCompleted: Int!
  $quizAvgScore: Float
  $currentStreak: Int!
  $longestStreak: Int!
  $preferredLearningTime: String
  $engagementScore: Float
  $churnRisk: ChurnRisk
) @auth(level: SERVICE) {
  upsertUserAnalytics(
    where: {
      userId: { eq: $userId }
      date: { eq: $date }
    }
    create: {
      userId: $userId
      date: $date
      totalXp: $totalXp
      sessionsCount: $sessionsCount
      averageSessionTime: $averageSessionTime
      blocksCompleted: $blocksCompleted
      quizAvgScore: $quizAvgScore
      currentStreak: $currentStreak
      longestStreak: $longestStreak
      preferredLearningTime: $preferredLearningTime
      engagementScore: $engagementScore
      churnRisk: $churnRisk
      lastActiveAt: "now()"
    }
    update: {
      totalXp: { increment: $totalXp }
      sessionsCount: { increment: $sessionsCount }
      averageSessionTime: $averageSessionTime
      blocksCompleted: { increment: $blocksCompleted }
      quizAvgScore: $quizAvgScore
      currentStreak: $currentStreak
      longestStreak: $longestStreak
      preferredLearningTime: $preferredLearningTime
      engagementScore: $engagementScore
      churnRisk: $churnRisk
      lastActiveAt: "now()"
      updatedAt: "now()"
    }
  ) {
    id
  }
}

# ==================== ADK SESSION MUTATIONS ====================
mutation CreateOrGetAdkSession(
  $userId: ID!
  $appName: String!
  $sessionId: String!
) @auth(level: USER) {
  upsertAdkSession(
    where: {
      userId: { eq: $userId }
      appName: { eq: $appName }
    }
    create: {
      userId: $userId
      appName: $appName
      sessionId: $sessionId
    }
    update: {
      sessionId: $sessionId
      lastUpdateTime: "now()"
    }
  ) {
    id
    sessionId
  }
}

mutation UpdateAdkSessionState(
  $sessionId: ID!
  $currentContext: String
  $userLevel: String
  $lastTopics: String
  $preferences: String
) @auth(level: USER) {
  upsertAdkSessionState(
    where: { sessionId: { eq: $sessionId } }
    create: {
      sessionId: $sessionId
      currentContext: $currentContext
      userLevel: $userLevel
      lastTopics: $lastTopics
      preferences: $preferences
    }
    update: {
      currentContext: $currentContext
      userLevel: $userLevel
      lastTopics: $lastTopics
      preferences: $preferences
      updatedAt: "now()"
    }
  ) {
    id
  }
}

mutation CreateAdkMessage(
  $sessionId: ID!
  $role: String!
  $content: String!
) @auth(level: USER) {
  createAdkMessage(data: {
    sessionId: $sessionId
    role: $role
    content: $content
  }) {
    id
    createdAt
  }
}

# ==================== INPUT TYPES ====================
input SkillComponentInput {
  skillAnalysisId: ID!
  name: String!
  description: String!
  importance: Int!
  order: Int!
}

input SkillPrerequisiteInput {
  skillAnalysisId: ID!
  name: String!
  description: String!
  isRequired: Boolean!
  order: Int!
}

input CareerPathInput {
  skillAnalysisId: ID!
  title: String!
  description: String!
  averageSalary: String
  demandLevel: MarketDemand!
  order: Int!
}

input LearningObjectiveInput {
  pedagogicalAnalysisId: ID!
  objective: String!
  measurable: Boolean!
  timeframe: String!
  order: Int!
}

input BloomsTaxonomyInput {
  pedagogicalAnalysisId: ID!
  level: String!
  percentage: Int!
}

input DayObjectiveInput {
  dayContentId: ID!
  objective: String!
  order: Int!
}

input KeyConceptInput {
  readContentId: ID!
  concept: String!
  definition: String!
  order: Int!
}

input QuizOptionInput {
  questionId: ID!
  optionText: String!
  isCorrect: Boolean!
  order: Int!
}

input ActionStepInput {
  actionTaskId: ID!
  instruction: String!
  order: Int!
}

input ActionDeliverableInput {
  actionTaskId: ID!
  description: String!
  type: String!
  order: Int!
} 