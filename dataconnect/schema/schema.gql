# dataconnect/schema/schema.gql

"""
Representa un usuario de la plataforma Skillix.
El firebaseUid es la clave primaria, vinculada a Firebase Authentication.
"""
type User @table(name: "users") {
  firebaseUid: String! @primaryKey @col(name: "firebase_uid")
  email: String @unique # Asumiendo que quieres almacenar el email
  displayName: String # Asumiendo que quieres almacenar el nombre para mostrar
  createdAt: Timestamp @default(expr: "now()")

  # Relaciones (ejemplos, se pueden expandir)
  learningPlans: [LearningPlan] @relation(field: "user", references: "firebaseUid")
  userProgress: [UserProgress] @relation(field: "user", references: "firebaseUid")
  userAnalytics: UserAnalytics @relation(field: "user", references: "firebaseUid") # Asumiendo 1-a-1 con UserAnalytics
  streakData: StreakData @relation(field: "user", references: "firebaseUid") # Asumiendo 1-a-1
  notifications: [Notification] @relation(field: "user", references: "firebaseUid")
  skiMessages: @relation(field: "user", references: "firebaseUid")
}

"""
Plan de aprendizaje personalizado para un usuario.
Derivado de LearningPlanSchema.
"""
type LearningPlan @table(name: "learning_plans") {
  id: ID! @primaryKey @default(expr: "uuidV4()")
  userId: String! @col(name: "user_firebase_uid") # Clave foránea a User
  user: User @foreignKey(field: "userId", references: "firebaseUid")

  totalDurationWeeks: Int! @col(name: "total_duration_weeks")
  dailyTimeMinutes: Int! @col(name: "daily_time_minutes")
  skillLevelTarget: SkillLevel! @col(name: "skill_level_target")
  milestones:!
  dailyActivities: # Embebido o tabla separada si es complejo/reutilizable
  resources: # Embebido o tabla separada
  progressMetrics:! @col(name: "progress_metrics")
  flexibilityOptions: @col(name: "flexibility_options")
  createdAt: Timestamp @default(expr: "now()")
  updatedAt: Timestamp @default(expr: "now()")

  # Relaciones
  dayContents: @relation(field: "learningPlan", references: "id")
  skillAnalysis: SkillAnalysis @relation(field: "learningPlan", references: "id") # Asumiendo 1-a-1
}

"""
Actividad diaria dentro de un plan de aprendizaje.
Parte de LearningPlan.
"""
type DailyActivity { # No es una tabla separada a menos que sea necesario, puede ser JSONB
  type: String! # Podría ser un enum si los tipos son fijos
  durationMinutes: Int! @col(name: "duration_minutes")
  description: String!
}

"""
Recurso de aprendizaje.
Parte de LearningPlan.
"""
type Resource { # No es una tabla separada a menos que sea necesario, puede ser JSONB
  name: String!
  url: String
  description: String # Si no es una URL
}

"""
Contenido específico para un día dentro de un plan de aprendizaje.
Derivado de DayContentSchema.
"""
type DayContent @table(name: "day_contents") {
  id: ID! @primaryKey @default(expr: "uuidV4()")
  learningPlanId: ID! @col(name: "learning_plan_id") # Clave foránea a LearningPlan
  learningPlan: LearningPlan @foreignKey(field: "learningPlanId", references: "id")
  dayNumber: Int! @col(name: "day_number") # Para identificar el día dentro del plan

  title: String!
  isActionDay: Boolean! @col(name: "is_action_day")
  objectives:!
  mainContent: MainContent @col(name: "main_content") # Puede ser JSONB si es complejo y variable
  actionTask: ActionTask @col(name: "action_task") # Puede ser JSONB
  totalXp: Int! @col(name: "total_xp")
  estimatedTime: String! @col(name: "estimated_time") # O Int si son minutos
  createdAt: Timestamp @default(expr: "now()")
  updatedAt: Timestamp @default(expr: "now()")

  # Relaciones
  exercises: [Exercise] @relation(field: "dayContent", references: "id") # Si Exercise es una tabla separada
  # userProgress: UserProgress @relation(field: "dayContent", references: "id") # Si es 1-a-1 con un UserProgress específico del día
}

"""
Contenido principal para un DayContent (lectura o audio).
Derivado de MainContentSchema.
"""
type MainContent { # Puede ser JSONB en la tabla DayContent
  type: ContentType! # 'read' o 'audio'
  title: String!
  # Campos para 'read'
  content: String
  estimatedTimeRead: Int @col(name: "estimated_time_read") # en minutos
  keyConcepts: [KeyConcept]
  # Campos para 'audio'
  transcript: String
  audioUrl: String @col(name: "audio_url")
  durationAudio: Int @col(name: "duration_audio") # en segundos
  
  funFact: String @col(name: "fun_fact")
  xp: Int!
}

"""
Concepto clave dentro de MainContent.
"""
type KeyConcept { # Puede ser JSONB
  term: String!
  definition: String!
}

"""
Tarea de acción para un DayContent.
Derivado de ActionTaskSchema.
"""
type ActionTask { # Puede ser JSONB en la tabla DayContent
  title: String!
  challengeDescription: String! @col(name: "challenge_description")
  steps:!
  timeEstimate: String! @col(name: "time_estimate")
  tips:
  realWorldContext: String! @col(name: "real_world_context")
  successCriteria:! @col(name: "success_criteria")
  skiMotivation: String! @col(name: "ski_motivation")
  difficultyAdaptation: String @col(name: "difficulty_adaptation") # Podría ser un enum
  xp: Int!
}

"""
Representa un bloque de ejercicio. Será una unión de tipos específicos de ejercicio.
Derivado de ExerciseBlockSchema.
"""
type Exercise @table(name: "exercises"){ # O podría ser JSONB en DayContent si la estructura varía mucho y no se consulta individualmente
  id: ID! @primaryKey @default(expr: "uuidV4()")
  dayContentId: ID @col(name: "day_content_id") # Opcional si algunos ejercicios no están ligados a un día
  dayContent: DayContent @foreignKey(field: "dayContentId", references: "id")

  type: ContentType! # quiz_mcq, quiz_truefalse, etc.
  # Común
  xp: Int!
  explanation: String

  # Específico para QuizMCQ
  questionMCQ: String @col(name: "question_mcq")
  optionsMCQ: @col(name: "options_mcq")
  answerMCQ: Int @col(name: "answer_mcq") # 0-indexed

  # Específico para TrueFalse
  statementTF: String @col(name: "statement_tf")
  answerTF: Boolean @col(name: "answer_tf")

  # Específico para MatchToMeaning
  pairsMTM: [MatchPair] @col(name: "pairs_mtm") # JSONB

  # Específico para ScenarioQuiz
  scenarioSQ: String @col(name: "scenario_sq")
  questionSQ: String @col(name: "question_sq")
  optionsSQ: @col(name: "options_sq")
  answerSQ: Int @col(name: "answer_sq")
}

"""
Par para ejercicios de tipo MatchToMeaning.
"""
type MatchPair { # JSONB
  term: String!
  meaning: String!
}


"""
Análisis de usuario y patrones de aprendizaje.
Derivado de UserAnalyticsSchema.
"""
type UserAnalytics @table(name: "user_analytics") {
  id: ID! @primaryKey @default(expr: "uuidV4()")
  userId: String! @unique @col(name: "user_firebase_uid") # Clave foránea a User
  user: User @foreignKey(field: "userId", references: "firebaseUid")

  learningPatterns: @col(name: "learning_patterns") # JSONB o tabla separada
  optimalLearningTime: OptimalLearningTimeData @col(name: "optimal_learning_time") # JSONB o tabla separada
  contentOptimization: ContentOptimizationData @col(name: "content_optimization") # JSONB o tabla separada
  streakMaintenanceAnalysis: StreakMaintenanceData @col(name: "streak_maintenance_analysis") # JSONB o tabla separada
  overallEngagementScore: Float @col(name: "overall_engagement_score")
  keyInsights: @col(name: "key_insights")
  createdAt: Timestamp @default(expr: "now()")
  updatedAt: Timestamp @default(expr: "now()")
}

"""
Datos de un patrón de aprendizaje específico.
Parte de UserAnalytics.
"""
type LearningPatternData { # JSONB
  patternType: PatternType! @col(name: "pattern_type")
  description: String!
  confidence: Float!
  recommendations:!
}

"""
Datos del tiempo óptimo de aprendizaje.
Parte de UserAnalytics.
"""
type OptimalLearningTimeData { # JSONB
  bestTimeWindowStart: String! @col(name: "best_time_window_start") # HH:MM
  bestTimeWindowEnd: String! @col(name: "best_time_window_end")   # HH:MM
  reason: String!
  notificationTime: String! @col(name: "notification_time")     # HH:MM
  engagementPrediction: Float! @col(name: "engagement_prediction")
}

"""
Datos de optimización de contenido.
Parte de UserAnalytics.
"""
type ContentOptimizationData { # JSONB
  difficultyAdjustment: DifficultyAdjustment! @col(name: "difficulty_adjustment")
  contentTypePreferences:! @col(name: "content_type_preferences") # Podría ser si se alinea
  idealSessionLengthMinutes: Int! @col(name: "ideal_session_length_minutes")
  pacingRecommendation: String! @col(name: "pacing_recommendation")
}

"""
Datos del análisis de mantenimiento de rachas.
Parte de UserAnalytics.
"""
type StreakMaintenanceData { # JSONB
  riskLevel: RiskLevel! @col(name: "risk_level")
  riskFactors:! @col(name: "risk_factors")
  interventionStrategies:! @col(name: "intervention_strategies")
  motivationalApproach: String! @col(name: "motivational_approach")
}

"""
Progreso del usuario en la plataforma.
"""
type UserProgress @table(name: "user_progress") {
  id: ID! @primaryKey @default(expr: "uuidV4()")
  userId: String! @col(name: "user_firebase_uid") # Clave foránea a User
  user: User @foreignKey(field: "userId", references: "firebaseUid")
  dayContentId: ID @col(name: "day_content_id") # Opcional: progreso general o por día
  dayContent: DayContent @foreignKey(field: "dayContentId", references: "id")

  currentStreak: Int @default(expr: "0") @col(name: "current_streak")
  totalXp: Int @default(expr: "0") @col(name: "total_xp")
  completedDays: Int @default(expr: "0") @col(name: "completed_days")
  averageQuizScore: Float @col(name: "average_quiz_score")
  # Otros campos de progreso, como xp por día, ejercicios completados, etc.
  lastCompletedDate: Timestamp
  createdAt: Timestamp @default(expr: "now()")
  updatedAt: Timestamp @default(expr: "now()")
}

"""
Análisis de una habilidad específica.
Derivado de SkillAnalysisSchema.
"""
type SkillAnalysis @table(name: "skill_analyses") {
  id: ID! @primaryKey @default(expr: "uuidV4()")
  learningPlanId: ID @unique @col(name: "learning_plan_id") # Opcional, si un análisis puede existir sin plan
  learningPlan: LearningPlan @foreignKey(field: "learningPlanId", references: "id")

  skillName: String! @col(name: "skill_name")
  skillCategory: String! @col(name: "skill_category")
  marketDemand: String! @col(name: "market_demand") # Podría ser un enum
  components:! @col(name: "components") # JSONB
  learningPathRecommendation: String! @col(name: "learning_path_recommendation")
  realWorldApplications: @col(name: "real_world_applications")
  complementarySkills: @col(name: "complementary_skills")
  isSkillValid: Boolean! @col(name: "is_skill_valid")
  viabilityReason: String @col(name: "viability_reason")
  createdAt: Timestamp @default(expr: "now()")
}

"""
Componente de una habilidad.
Parte de SkillAnalysis.
"""
type SkillComponentData { # JSONB
  name: String!
  description: String!
  difficultyLevel: SkillLevel! @col(name: "difficulty_level")
  prerequisites:
  estimatedLearningHours: Int! @col(name: "estimated_learning_hours")
  practicalApplications: @col(name: "practical_applications")
}

"""
Notificaciones para el usuario.
"""
type Notification @table(name: "notifications") {
  id: ID! @primaryKey @default(expr: "uuidV4()")
  userId: String! @col(name: "user_firebase_uid")
  user: User @foreignKey(field: "userId", references: "firebaseUid")
  
  message: String!
  type: String # Ej: 'reminder', 'achievement', 'streak_risk'
  isRead: Boolean @default(expr: "false") @col(name: "is_read")
  scheduledTime: Timestamp @col(name: "scheduled_time") # Si es una notificación programada
  createdAt: Timestamp @default(expr: "now()")
}

"""
Datos de rachas de aprendizaje del usuario.
"""
type StreakData @table(name: "streak_data") {
  id: ID! @primaryKey @default(expr: "uuidV4()")
  userId: String! @unique @col(name: "user_firebase_uid")
  user: User @foreignKey(field: "userId", references: "firebaseUid")

  currentStreak: Int! @default(expr: "0") @col(name: "current_streak")
  longestStreak: Int! @default(expr: "0") @col(name: "longest_streak")
  lastContributionDate: Date @col(name: "last_contribution_date")
  # Otros campos relevantes para rachas
  updatedAt: Timestamp @default(expr: "now()")
}

"""
Mensajes de la mascota AI, Ski.
Derivado de SkiMessageSchema.
"""
type SkiMessage @table(name: "ski_messages") {
  id: ID! @primaryKey @default(expr: "uuidV4()")
  userId: String! @col(name: "user_firebase_uid") # A quién va dirigido el mensaje
  user: User @foreignKey(field: "userId", references: "firebaseUid")
  
  situation: String # Contexto del mensaje, ej: 'daily_motivation', 'streak_celebration_7_days'
  message: String!
  emojiStyle: SkiEmojiStyle! @col(name: "emoji_style")
  animationSuggestion: String! @col(name: "animation_suggestion")
  isDelivered: Boolean @default(expr: "false") @col(name: "is_delivered")
  createdAt: Timestamp @default(expr: "now()")
}

# Podríamos añadir más tipos como LearningSection, LearningDay si son necesarios como tablas separadas
# o si su estructura es compleja y se reutiliza. Por ahora, muchos de los detalles
# de LearningPlan y DayContent se han modelado como campos directos o tipos embebidos (JSONB).
# Si necesitas consultas muy específicas sobre esos sub-componentes, separarlos en tablas
# podría ser beneficioso.