# ==================== ENUMS ====================
enum AuthProvider {
  EMAIL
  GOOGLE
  APPLE
}

enum Platform {
  IOS
  ANDROID
  WEB
}

enum UserExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LearningStyle {
  VISUAL
  AUDITORY
  KINESTHETIC
  MIXED
}

enum ContentBlockType {
  AUDIO
  READ
  QUIZ_MCQ
  ACTION_TASK
  VIDEO
  EXERCISE
}

enum CompletionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum SkillCategory {
  TECHNICAL
  CREATIVE
  BUSINESS
  PERSONAL_DEVELOPMENT
  LANGUAGE
  OTHER
}

enum MarketDemand {
  HIGH
  MEDIUM
  LOW
}

enum ChurnRisk {
  LOW
  MEDIUM
  HIGH
}

# ==================== USER TABLES ====================
type User @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  email: String! @unique
  name: String!
  isActive: Boolean! @default(value: true)
  authProvider: AuthProvider!
  platform: Platform
  firebaseUid: String @unique
  
  # OAuth fields
  photoUrl: String
  emailVerified: Boolean! @default(value: false)
  
  # Auth provider specific
  appleUserIdentifier: String @unique
  appleIdentityToken: String
  googleIdToken: String
  googleAccessToken: String
  
  # Metadata
  lastSignInAt: Timestamp
  createdAt: Timestamp! @default(expr: "now()")
  updatedAt: Timestamp! @default(expr: "now()")

  # Relations
  preferences: UserPreference @hasOne
  learningPlan: LearningPlan @hasOne
  enrollments: [Enrollment!]! @hasMany
  progress: [ContentProgress!]! @hasMany
  analytics: [UserAnalytics!]! @hasMany
  adkSessions: [AdkSession!]! @hasMany
}

type UserPreference @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  userId: ID! @foreignKey(references: "User.id") @unique
  skill: String!
  experienceLevel: UserExperienceLevel!
  motivation: String!
  availableTimeMinutes: Int!
  learningStyle: LearningStyle!
  goal: String!
  createdAt: Timestamp! @default(expr: "now()")
  updatedAt: Timestamp! @default(expr: "now()")

  # Relations
  user: User! @belongsTo
}

# ==================== LEARNING PLAN TABLES ====================
type LearningPlan @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  userId: ID! @foreignKey(references: "User.id") @unique
  generatedBy: String!
  generatedAt: Timestamp!
  createdAt: Timestamp! @default(expr: "now()")
  updatedAt: Timestamp! @default(expr: "now()")

  # Relations
  user: User! @belongsTo
  sections: [PlanSection!]! @hasMany
  skillAnalysis: SkillAnalysis @hasOne
  pedagogicalAnalysis: PedagogicalAnalysis @hasOne
}

type SkillAnalysis @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  learningPlanId: ID! @foreignKey(references: "LearningPlan.id") @unique
  skill: String!
  skillCategory: SkillCategory!
  marketDemand: MarketDemand!
  generatedBy: String!
  createdAt: Timestamp! @default(expr: "now()")

  # Relations
  learningPlan: LearningPlan! @belongsTo
  components: [SkillComponent!]! @hasMany
  prerequisites: [SkillPrerequisite!]! @hasMany
  careerPaths: [CareerPath!]! @hasMany
}

type SkillComponent @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  skillAnalysisId: ID! @foreignKey(references: "SkillAnalysis.id")
  name: String!
  description: String!
  importance: Int! # 1-5
  order: Int!

  # Relations
  skillAnalysis: SkillAnalysis! @belongsTo
}

type SkillPrerequisite @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  skillAnalysisId: ID! @foreignKey(references: "SkillAnalysis.id")
  name: String!
  description: String!
  isRequired: Boolean!
  order: Int!

  # Relations
  skillAnalysis: SkillAnalysis! @belongsTo
}

type CareerPath @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  skillAnalysisId: ID! @foreignKey(references: "SkillAnalysis.id")
  title: String!
  description: String!
  averageSalary: String
  demandLevel: MarketDemand!
  order: Int!

  # Relations
  skillAnalysis: SkillAnalysis! @belongsTo
}

type PedagogicalAnalysis @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  learningPlanId: ID! @foreignKey(references: "LearningPlan.id") @unique
  cognitivLoadAssessment: String!
  createdAt: Timestamp! @default(expr: "now()")

  # Relations
  learningPlan: LearningPlan! @belongsTo
  objectives: [LearningObjective!]! @hasMany
  bloomsLevels: [BloomsTaxonomy!]! @hasMany
  engagementTechniques: [EngagementTechnique!]! @hasMany
  assessmentMethods: [AssessmentMethod!]! @hasMany
}

type LearningObjective @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  pedagogicalAnalysisId: ID! @foreignKey(references: "PedagogicalAnalysis.id")
  objective: String!
  measurable: Boolean!
  timeframe: String!
  order: Int!

  # Relations
  pedagogicalAnalysis: PedagogicalAnalysis! @belongsTo
}

type BloomsTaxonomy @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  pedagogicalAnalysisId: ID! @foreignKey(references: "PedagogicalAnalysis.id")
  level: String! # Remember, Understand, Apply, Analyze, Evaluate, Create
  percentage: Int!

  # Relations
  pedagogicalAnalysis: PedagogicalAnalysis! @belongsTo

  @@unique([pedagogicalAnalysisId, level])
}

type EngagementTechnique @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  pedagogicalAnalysisId: ID! @foreignKey(references: "PedagogicalAnalysis.id")
  name: String!
  description: String!
  frequency: String! # Daily, Weekly, Per Section

  # Relations
  pedagogicalAnalysis: PedagogicalAnalysis! @belongsTo
}

type AssessmentMethod @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  pedagogicalAnalysisId: ID! @foreignKey(references: "PedagogicalAnalysis.id")
  type: String!
  description: String!
  frequency: String!

  # Relations
  pedagogicalAnalysis: PedagogicalAnalysis! @belongsTo
}

type PlanSection @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  planId: ID! @foreignKey(references: "LearningPlan.id")
  title: String!
  description: String
  order: Int!
  createdAt: Timestamp! @default(expr: "now()")
  updatedAt: Timestamp! @default(expr: "now()")

  # Relations
  plan: LearningPlan! @belongsTo
  days: [DayContent!]! @hasMany
}

# ==================== CONTENT TABLES ====================
type DayContent @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  sectionId: ID! @foreignKey(references: "PlanSection.id")
  dayNumber: Int!
  title: String!
  focusArea: String!
  isActionDay: Boolean!
  generatedBy: String!
  generatedAt: Timestamp!
  completionStatus: CompletionStatus! @default(value: "PENDING")
  completedAt: Timestamp
  createdAt: Timestamp! @default(expr: "now()")
  updatedAt: Timestamp! @default(expr: "now()")

  # Relations
  section: PlanSection! @belongsTo
  objectives: [DayObjective!]! @hasMany
  mainContent: MainContent @hasOne  # Contenido principal (audio o lectura)
  exercises: [ContentBlock!]! @hasMany  # Ejercicios basados en el contenido
  progress: [ContentProgress!]! @hasMany

  @@unique([sectionId, dayNumber])
}

type DayObjective @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  dayContentId: ID! @foreignKey(references: "DayContent.id")
  objective: String!
  order: Int!

  # Relations
  dayContent: DayContent! @belongsTo
}

# Contenido principal del d√≠a (audio o lectura)
type MainContent @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  dayContentId: ID! @foreignKey(references: "DayContent.id") @unique
  contentType: MainContentType! # AUDIO o READ
  title: String!
  funFact: String!  # Fun fact al final del contenido
  xp: Int! @default(value: 20)
  createdAt: Timestamp! @default(expr: "now()")

  # Relations
  dayContent: DayContent! @belongsTo
  audioContent: AudioContent @hasOne
  readContent: ReadContent @hasOne
}

# Bloques de ejercicios (basados en el contenido principal)
type ContentBlock @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  dayContentId: ID! @foreignKey(references: "DayContent.id")
  blockType: ContentBlockType!
  title: String!
  xp: Int! @default(value: 0)
  order: Int!
  estimatedMinutes: Int
  createdAt: Timestamp! @default(expr: "now()")

  # Relations
  dayContent: DayContent! @belongsTo
  quizContent: QuizContent @hasOne
  actionTask: ActionTask @hasOne
  exerciseContent: ExerciseContent @hasOne
  progress: [ContentProgress!]! @hasMany
}

type AudioContent @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  mainContentId: ID! @foreignKey(references: "MainContent.id") @unique
  audioUrl: String!
  transcript: String!
  duration: Int! # seconds
  voiceType: String!

  # Relations
  mainContent: MainContent! @belongsTo
}

type ReadContent @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  mainContentId: ID! @foreignKey(references: "MainContent.id") @unique
  content: String!
  estimatedReadTime: Int! # minutes
  
  # Relations
  mainContent: MainContent! @belongsTo
  keyConcepts: [KeyConcept!]! @hasMany
}

type KeyConcept @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  readContentId: ID! @foreignKey(references: "ReadContent.id")
  concept: String!
  definition: String!
  order: Int!

  # Relations
  readContent: ReadContent! @belongsTo
}

type QuizContent @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  contentBlockId: ID! @foreignKey(references: "ContentBlock.id") @unique
  
  # Relations
  contentBlock: ContentBlock! @belongsTo
  questions: [QuizQuestion!]! @hasMany
}

type QuizQuestion @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  quizContentId: ID! @foreignKey(references: "QuizContent.id")
  question: String!
  correctAnswer: String!
  explanation: String!
  order: Int!

  # Relations
  quizContent: QuizContent! @belongsTo
  options: [QuizOption!]! @hasMany
}

type QuizOption @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  questionId: ID! @foreignKey(references: "QuizQuestion.id")
  optionText: String!
  isCorrect: Boolean!
  order: Int!

  # Relations
  question: QuizQuestion! @belongsTo
}

type ActionTask @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  contentBlockId: ID! @foreignKey(references: "ContentBlock.id") @unique
  taskType: String! # practice, project, reflection
  description: String!
  instructions: String!
  estimatedTime: Int! # minutes
  
  # Relations
  contentBlock: ContentBlock! @belongsTo
  steps: [ActionStep!]! @hasMany
  deliverables: [ActionDeliverable!]! @hasMany
}

type ActionStep @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  actionTaskId: ID! @foreignKey(references: "ActionTask.id")
  instruction: String!
  order: Int!

  # Relations
  actionTask: ActionTask! @belongsTo
}

type ActionDeliverable @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  actionTaskId: ID! @foreignKey(references: "ActionTask.id")
  description: String!
  type: String! # document, code, presentation, etc
  order: Int!

  # Relations
  actionTask: ActionTask! @belongsTo
}

# Nuevo tipo para ejercicios gen√©ricos
type ExerciseContent @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  contentBlockId: ID! @foreignKey(references: "ContentBlock.id") @unique
  exerciseType: String! # fill-in-blanks, matching, ordering, etc
  instructions: String!
  exerciseData: String! # JSON string con la estructura espec√≠fica del ejercicio
  
  # Relations
  contentBlock: ContentBlock! @belongsTo
}

# ==================== ENROLLMENT & PROGRESS TABLES ====================
type Enrollment @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  userId: ID! @foreignKey(references: "User.id")
  learningPlanId: ID! @foreignKey(references: "LearningPlan.id")
  status: CompletionStatus! @default(value: "PENDING")
  startedAt: Timestamp
  completedAt: Timestamp
  lastActivityAt: Timestamp
  currentDayNumber: Int! @default(value: 0)
  totalXpEarned: Int! @default(value: 0)
  createdAt: Timestamp! @default(expr: "now()")
  updatedAt: Timestamp! @default(expr: "now()")

  # Relations
  user: User! @belongsTo
  learningPlan: LearningPlan! @belongsTo

  @@unique([userId, learningPlanId])
}

type ContentProgress @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  userId: ID! @foreignKey(references: "User.id")
  contentBlockId: ID! @foreignKey(references: "ContentBlock.id")
  completed: Boolean! @default(value: false)
  xpEarned: Int! @default(value: 0)
  attempts: Int! @default(value: 0)
  timeSpent: Int! @default(value: 0) # seconds
  score: Float # For quizzes
  completedAt: Timestamp
  createdAt: Timestamp! @default(expr: "now()")
  updatedAt: Timestamp! @default(expr: "now()")

  # Relations
  user: User! @belongsTo
  contentBlock: ContentBlock! @belongsTo
  responses: [QuizResponse!]! @hasMany

  @@unique([userId, contentBlockId])
}

type QuizResponse @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  progressId: ID! @foreignKey(references: "ContentProgress.id")
  questionId: ID! @foreignKey(references: "QuizQuestion.id")
  selectedOptionId: ID! @foreignKey(references: "QuizOption.id")
  isCorrect: Boolean!
  answeredAt: Timestamp! @default(expr: "now()")

  # Relations
  progress: ContentProgress! @belongsTo
  question: QuizQuestion! @belongsTo
  selectedOption: QuizOption! @belongsTo
}

# ==================== ANALYTICS TABLES ====================
type UserAnalytics @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  userId: ID! @foreignKey(references: "User.id")
  date: Date!
  totalXp: Int! @default(value: 0)
  sessionsCount: Int! @default(value: 0)
  averageSessionTime: Int! # minutes
  blocksCompleted: Int! @default(value: 0)
  quizAvgScore: Float
  currentStreak: Int! @default(value: 0)
  longestStreak: Int! @default(value: 0)
  preferredLearningTime: String # morning, afternoon, evening
  engagementScore: Float
  churnRisk: ChurnRisk
  lastActiveAt: Timestamp! @default(expr: "now()")
  createdAt: Timestamp! @default(expr: "now()")
  updatedAt: Timestamp! @default(expr: "now()")

  # Relations
  user: User! @belongsTo

  @@unique([userId, date])
}

# ==================== ADK SESSION TABLES ====================
type AdkSession @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  userId: ID! @foreignKey(references: "User.id")
  sessionId: String! @unique
  appName: String!
  lastUpdateTime: Timestamp! @default(expr: "now()")
  createdAt: Timestamp! @default(expr: "now()")
  updatedAt: Timestamp! @default(expr: "now()")

  # Relations
  user: User! @belongsTo
  messages: [AdkMessage!]! @hasMany
  state: AdkSessionState @hasOne

  @@unique([userId, appName])
}

type AdkSessionState @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  sessionId: ID! @foreignKey(references: "AdkSession.id") @unique
  currentContext: String
  userLevel: String
  lastTopics: String
  preferences: String
  updatedAt: Timestamp! @default(expr: "now()")

  # Relations
  session: AdkSession! @belongsTo
}

type AdkMessage @table {
  id: ID! @id @default(expr: "uuid_generate_v4()")
  sessionId: ID! @foreignKey(references: "AdkSession.id")
  role: String! # user, assistant
  content: String!
  createdAt: Timestamp! @default(expr: "now()")

  # Relations
  session: AdkSession! @belongsTo

  @@index([sessionId, createdAt])
} 