// src/services/llm/pedagogicalExpert.service.ts

import { z } from 'zod';
import { getOpenAiChatCompletion, LlmResponse } from './openai.service';
import { getConfig } from '../../config';
import OpenAI from 'openai';
import { LearningPlan } from './schemas'; // For typing the input plan
import { UserSkillContext } from './skillAnalyzer.service'; // For typing userContext

// Importar schemas y tipos desde el archivo centralizado
import {
  PedagogicalAnalysisSchema,
  AdaptiveLearningRecommendationSchema,
  type PedagogicalAnalysis,
  type AdaptiveLearningRecommendation
} from './schemas';
import { SYSTEM_PROMPT_PEDAGOGICAL_EXPERT, SYSTEM_PROMPT_ADAPTIVE_LEARNING_SPECIALIST } from './prompts';

const config = getConfig();

// --- Input interfaces para las funciones del servicio ---

// Input interface for pedagogical analysis function
export interface PedagogicalAnalysisInput {
  learningPlan: LearningPlan; // The plan generated by learningPlanner.service
  userContext: UserSkillContext & { 
    skill: string; 
    learning_style?: string;
    preferred_study_time?: string;
    learning_context?: string;
    challenge_preference?: string;
  }; // User context, including skill and optional learning preferences
}

// Input interface for adaptive learning recommendation function
// TODO: Define a more specific type for userProgressData
export interface AdaptiveLearningInput {
  userProgressData: Record<string, unknown>; // e.g., { completion_rates: {"day1": 0.8}, quiz_scores: {"day1_quiz1": 75}, time_spent: {"day1": "20min"} }
  currentLearningPlanSegment?: Partial<LearningPlan>; // Optional: The specific part of the plan being adapted
  userContext: UserSkillContext & {
    preferred_study_time?: string;
    learning_context?: string;
    challenge_preference?: string;
  }; // General user context with learning preferences
}

/**
 * Analyzes a learning plan from a pedagogical perspective using OpenAI.
 * @param input Contains the learningPlan object and userContext.
 * @returns A promise that resolves with the PedagogicalAnalysis object or null if an error occurs.
 */
export async function analyzePlanPedagogically(
  input: PedagogicalAnalysisInput
): Promise<PedagogicalAnalysis | null> {
  const { learningPlan, userContext } = input;

  const userMessageContent = `Analyze this learning plan from a pedagogical perspective:

Learning Plan:
${JSON.stringify(learningPlan, null, 2)}

User Context:
- Skill: ${userContext.skill}
- Experience Level: ${userContext.experience}
- Daily Time: ${userContext.time}
- Learning Style: ${userContext.learning_style || 'not specified'}
- Goal: ${userContext.goal}
- Preferred Study Time: ${userContext.preferred_study_time || 'not specified'}
- Learning Context: ${userContext.learning_context || 'not specified'}
- Challenge Preference: ${userContext.challenge_preference || 'not specified'}

Provide detailed pedagogical analysis and recommendations in the exact JSON format specified in the system instructions.`;

  const messages: OpenAI.Chat.ChatCompletionMessageParam[] = [
    { role: 'system', content: SYSTEM_PROMPT_PEDAGOGICAL_EXPERT },
    { role: 'user', content: userMessageContent },
  ];

  console.log(`Requesting pedagogical analysis for plan: "${userContext.skill}"`);

  const response: LlmResponse = await getOpenAiChatCompletion({
    messages,
    model: config.openaiModel, // Or a model specialized for educational analysis
    temperature: 0.5, // Lower temperature for more factual and structured analysis
    response_format: { type: 'json_object' },
  });

  if (!response.success || !response.content) {
    console.error('Error in OpenAI pedagogical analysis:', response.error);
    return null;
  }

  try {
    const rawResult = JSON.parse(response.content);
    const validatedResult = PedagogicalAnalysisSchema.parse(rawResult);
    
    console.log(`Pedagogical analysis completed and validated for: "${userContext.skill}"`);
    return validatedResult;
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.error('Zod validation error for PedagogicalAnalysis:', error.errors);
    } else {
      console.error('Error parsing JSON response for PedagogicalAnalysis from OpenAI:', error);
    }
    console.error('Original OpenAI content that failed parsing/validation:', response.content);
    return null;
  }
}

/**
 * Generates adaptive learning recommendations based on user progress using OpenAI.
 * @param input Contains userProgressData, optional currentLearningPlanSegment, and userContext.
 * @returns A promise that resolves with the AdaptiveLearningRecommendation object or null if an error occurs.
 */
export async function getAdaptiveRecommendations(
  input: AdaptiveLearningInput
): Promise<AdaptiveLearningRecommendation | null> {
  const { userProgressData, currentLearningPlanSegment, userContext } = input;

  let userMessageContent = `Analyze the following user progress and context to recommend learning adaptations:

User Progress Data:
${JSON.stringify(userProgressData, null, 2)}

User Context:
- Experience Level: ${userContext.experience}
- Daily Time: ${userContext.time}
- Learning Style: ${userContext.learning_style || 'not specified'}
- Goal: ${userContext.goal}
- Preferred Study Time: ${userContext.preferred_study_time || 'not specified'}
- Learning Context: ${userContext.learning_context || 'not specified'}
- Challenge Preference: ${userContext.challenge_preference || 'not specified'}
`;

  if (currentLearningPlanSegment) {
    userMessageContent += `
Current Learning Plan Segment (or relevant part of it) Being Evaluated:
${JSON.stringify(currentLearningPlanSegment, null, 2)}
`;
  }
  userMessageContent += `
Provide specific, actionable recommendations for content and motivational adaptations in the exact JSON format specified in the system instructions.`;

  const messages: OpenAI.Chat.ChatCompletionMessageParam[] = [
    { role: 'system', content: SYSTEM_PROMPT_ADAPTIVE_LEARNING_SPECIALIST },
    { role: 'user', content: userMessageContent },
  ];

  console.log(`Requesting adaptive learning recommendations for user: ${userContext.experience} learner.`); // Avoid logging PII

  const response: LlmResponse = await getOpenAiChatCompletion({
    messages,
    model: config.openaiModel, // Or a model specialized for this
    temperature: 0.6,
    response_format: { type: 'json_object' },
  });

  if (!response.success || !response.content) {
    console.error('Error in OpenAI adaptive learning recommendations:', response.error);
    return null;
  }

  try {
    const rawResult = JSON.parse(response.content);
    const validatedResult = AdaptiveLearningRecommendationSchema.parse(rawResult);
    
    console.log(`Adaptive learning recommendations generated and validated.`);
    return validatedResult;
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.error('Zod validation error for AdaptiveLearningRecommendation:', error.errors);
    } else {
      console.error('Error parsing JSON response for AdaptiveLearningRecommendation from OpenAI:', error);
    }
    console.error('Original OpenAI content that failed parsing/validation:', response.content);
    return null;
  }
}
