// src/services/llm/pedagogicalExpert.service.ts

import { z } from 'zod';
import { getOpenAiChatCompletion, LlmResponse } from './openai.service';
import { getConfig } from '../../config';
import OpenAI from 'openai';
import { LearningPlan } from './learningPlanner.service'; // For typing the input plan
import { UserSkillContext } from './skillAnalyzer.service'; // For typing userContext

const config = getConfig();

// --- Zod Schemas and TypeScript Types ---

export const PedagogicalAnalysisSchema = z.object({
  effectiveness_score: z.number().min(0).max(1)
    .describe("Overall pedagogical effectiveness score (0-1) of the learning plan."),
  cognitive_load_assessment: z.enum(["low", "medium", "high"])
    .describe("Assessment of the cognitive load the plan might impose (low, medium, high)."),
  scaffolding_quality: z.enum(["poor", "adequate", "excellent"])
    .describe("Quality of learning support, guidance, and progression within the plan."),
  engagement_potential: z.number().min(0).max(1)
    .describe("The plan's potential to keep the user engaged and motivated (0-1)."),
  recommendations: z.array(z.string().min(1))
    .describe("Specific, actionable recommendations to improve the pedagogical aspects of the plan."),
  learning_objectives: z.array(z.string().min(1))
    .describe("Clearly defined learning objectives that the plan should help the user achieve."),
  assessment_strategies: z.array(z.string().min(1))
    .describe("Suggested strategies or methods for assessing the user's learning and understanding."),
  improvement_areas: z.array(z.string().min(1))
    .describe("Specific areas within the learning plan that could be improved from a pedagogical standpoint."),
});
export type PedagogicalAnalysis = z.infer<typeof PedagogicalAnalysisSchema>;

export const AdaptiveLearningRecommendationSchema = z.object({
  difficulty_adjustment: z.enum(["increase", "maintain", "decrease"])
    .describe("Recommendation for adjusting the difficulty of upcoming content or activities."),
  pacing_recommendation: z.string().min(1)
    .describe("Suggestion regarding the speed or pace of learning (e.g., 'Suggest shorter, more frequent sessions', 'Encourage to proceed if comfortable')."),
  content_modifications: z.array(z.string().min(1))
    .describe("Specific modifications to suggest for the content itself (e.g., 'Add more visual examples for topic X', 'Provide a real-world case study for Y')."),
  motivational_elements: z.array(z.string().min(1))
    .describe("Motivational elements or techniques to incorporate (e.g., 'Celebrate the completion of the last challenging task', 'Remind user of their long-term goal related to this skill')."),
});
export type AdaptiveLearningRecommendation = z.infer<typeof AdaptiveLearningRecommendationSchema>;


// Input interface for pedagogical analysis function
export interface PedagogicalAnalysisInput {
  learningPlan: LearningPlan; // The plan generated by learningPlanner.service
  userContext: UserSkillContext & { skill: string; learning_style?: string; }; // User context, including skill and optional learning style
}

// Input interface for adaptive learning recommendation function
// TODO: Define a more specific type for userProgressData
export interface AdaptiveLearningInput {
  userProgressData: Record<string, any>; // e.g., { completion_rates: {"day1": 0.8}, quiz_scores: {"day1_quiz1": 75}, time_spent: {"day1": "20min"} }
  currentLearningPlanSegment?: Partial<LearningPlan>; // Optional: The specific part of the plan being adapted
  userContext: UserSkillContext; // General user context
}

const SYSTEM_PROMPT_PEDAGOGICAL_EXPERT = `You are an expert in learning sciences, instructional design, and educational psychology, with a strong understanding of andragogy (adult learning principles). Your role is to analyze a given learning plan for its educational effectiveness, considering the user's context.

Key Pedagogical Principles to Apply:
- Active Learning: Does the plan encourage hands-on practice, problem-solving, and active engagement rather than passive consumption?
- Spaced Repetition & Retrieval Practice: Are there implicit or explicit opportunities for recalling information and practicing skills over spaced intervals?
- Metacognition: Does the plan encourage learners to think about their own learning process, self-assess, and reflect?
- Zone of Proximal Development (ZPD): Are the tasks and progression designed to be challenging yet achievable, avoiding being too easy or overwhelmingly difficult for the user's stated experience level?
- Bloom's Taxonomy: Does the plan appropriately guide the learner through different cognitive levels (remember, understand, apply, analyze, evaluate, create) relevant to the skill and target level?
- Cognitive Load Management: Is the amount of new information and task complexity per day/session appropriate? Is there a risk of cognitive overload or underload?
- Scaffolding: Does the plan provide adequate support structures for new concepts, which are then gradually removed as the learner progresses?
- Engagement & Motivation: What is the potential for the plan to keep the user motivated? Are there varied activities, clear goals, and a sense of progress?

For Adult Learners (Andragogy focus):
- Relevance (Real-world Connection): How well does the plan connect learning to real-world applications and the learner's stated goals?
- Learner Experience: Does the plan respect and potentially leverage the learner's prior experience?
- Self-Direction: Does the plan allow for or encourage learner autonomy and choice where appropriate?
- Problem-Centered Learning: Is the learning framed around solving problems or achieving practical outcomes?

Input: You will receive a 'LearningPlan' JSON object and 'UserContext' (skill, experience, daily time, learning style, goal).

Task: Provide a detailed pedagogical analysis.

IMPORTANT: You MUST ALWAYS respond with a valid JSON object that strictly matches the 'PedagogicalAnalysis' structure provided below. All fields are required. Ensure string arrays are not empty if they are meant to contain information.
{
  "effectiveness_score": number (0-1, e.g., 0.85, representing overall pedagogical soundness),
  "cognitive_load_assessment": "string ('low', 'medium', or 'high')",
  "scaffolding_quality": "string ('poor', 'adequate', or 'excellent')",
  "engagement_potential": number (0-1, e.g., 0.9),
  "recommendations": ["string (specific, actionable recommendations to improve the plan, e.g., 'Incorporate a mini-project at the end of week 2 to apply concepts X and Y.')"],
  "learning_objectives": ["string (3-5 key, measurable learning objectives that this plan should help the user achieve, e.g., 'User will be able to explain the core principles of X.', 'User can build a basic Y application.')"],
  "assessment_strategies": ["string (suggested methods to assess learning, e.g., 'End-of-section quizzes with immediate feedback', 'Practical application exercises', 'Self-reflection prompts on challenges faced.')"],
  "improvement_areas": ["string (specific areas within the learning plan that could be improved, e.g., 'Clarity of milestones could be enhanced', 'More diverse resource types could be suggested for auditory learners.')"]
}`;

const SYSTEM_PROMPT_ADAPTIVE_LEARNING_SPECIALIST = `You are an adaptive learning specialist. Your role is to analyze user progress data and recommend adjustments to their learning experience to enhance effectiveness and engagement.

Input: You will receive user progress data (e.g., completion rates, quiz scores, time spent on tasks/days), potentially information about the current segment of their learning plan, and general user context (experience, goals, learning style).

Task: Provide specific, actionable recommendations for adapting the learning content or approach.

Consider:
- Completion Rates: Is the user consistently finishing daily tasks? Are they completing them much faster or slower than estimated?
- Quiz Performance / Understanding: What do quiz scores or other assessments indicate about their grasp of the material? Are there specific topics where they are struggling or excelling?
- Time Spent: Is the time spent on content aligned with estimates? Does it suggest they are rushing, getting stuck, or highly engaged?
- User Feedback (if available, though not explicitly in input structure for now).
- Stated Learning Style and Goals: How can adaptations better align with these?

IMPORTANT: You MUST ALWAYS respond with a valid JSON object that strictly matches the 'AdaptiveLearningRecommendation' structure:
{
  "difficulty_adjustment": "string ('increase', 'maintain', or 'decrease', based on overall performance and engagement)",
  "pacing_recommendation": "string (e.g., 'Suggest user takes a break if struggling', 'Encourage to tackle an optional advanced topic if excelling', 'Recommend reviewing prerequisite X before proceeding')",
  "content_modifications": ["string (e.g., 'For the next similar topic, provide more visual aids.', 'Offer an alternative explanation for concept Y.', 'Suggest a practical mini-challenge related to Z.')"],
  "motivational_elements": ["string (e.g., 'Acknowledge their consistent effort on difficult topics.', 'Highlight how far they've come towards their goal.', 'Suggest a short, fun related activity if engagement seems low.')"]
}
Recommendations should be tailored and constructive.`;

/**
 * Analyzes a learning plan from a pedagogical perspective using OpenAI.
 * @param input Contains the learningPlan object and userContext.
 * @returns A promise that resolves with the PedagogicalAnalysis object or null if an error occurs.
 */
export async function analyzePlanPedagogically(
  input: PedagogicalAnalysisInput
): Promise<PedagogicalAnalysis | null> {
  const { learningPlan, userContext } = input;

  const userMessageContent = `Analyze this learning plan from a pedagogical perspective:

Learning Plan:
${JSON.stringify(learningPlan, null, 2)}

User Context:
- Skill: ${userContext.skill}
- Experience Level: ${userContext.experience}
- Daily Time: ${userContext.time}
- Learning Style: ${userContext.learning_style || 'not specified'}
- Goal: ${userContext.goal}

Provide detailed pedagogical analysis and recommendations in the exact JSON format specified in the system instructions.`;

  const messages: OpenAI.Chat.ChatCompletionMessageParam[] = [
    { role: 'system', content: SYSTEM_PROMPT_PEDAGOGICAL_EXPERT },
    { role: 'user', content: userMessageContent },
  ];

  console.log(`Requesting pedagogical analysis for plan: "${userContext.skill}"`);

  const response: LlmResponse = await getOpenAiChatCompletion({
    messages,
    model: config.openaiModel, // Or a model specialized for educational analysis
    temperature: 0.5, // Lower temperature for more factual and structured analysis
    response_format: { type: 'json_object' },
  });

  if (!response.success || !response.content) {
    console.error('Error in OpenAI pedagogical analysis:', response.error);
    return null;
  }

  try {
    const rawResult = JSON.parse(response.content);
    const validatedResult = PedagogicalAnalysisSchema.parse(rawResult);
    
    console.log(`Pedagogical analysis completed and validated for: "${userContext.skill}"`);
    return validatedResult;
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.error('Zod validation error for PedagogicalAnalysis:', error.errors);
    } else {
      console.error('Error parsing JSON response for PedagogicalAnalysis from OpenAI:', error);
    }
    console.error('Original OpenAI content that failed parsing/validation:', response.content);
    return null;
  }
}

/**
 * Generates adaptive learning recommendations based on user progress using OpenAI.
 * @param input Contains userProgressData, optional currentLearningPlanSegment, and userContext.
 * @returns A promise that resolves with the AdaptiveLearningRecommendation object or null if an error occurs.
 */
export async function getAdaptiveRecommendations(
  input: AdaptiveLearningInput
): Promise<AdaptiveLearningRecommendation | null> {
  const { userProgressData, currentLearningPlanSegment, userContext } = input;

  let userMessageContent = `Analyze the following user progress and context to recommend learning adaptations:

User Progress Data:
${JSON.stringify(userProgressData, null, 2)}

User Context:
- Experience Level: ${userContext.experience}
- Daily Time: ${userContext.time}
- Learning Style: ${userContext.learning_style || 'not specified'}
- Goal: ${userContext.goal}
`;

  if (currentLearningPlanSegment) {
    userMessageContent += `
Current Learning Plan Segment (or relevant part of it) Being Evaluated:
${JSON.stringify(currentLearningPlanSegment, null, 2)}
`;
  }
  userMessageContent += `
Provide specific, actionable recommendations for content and motivational adaptations in the exact JSON format specified in the system instructions.`;

  const messages: OpenAI.Chat.ChatCompletionMessageParam[] = [
    { role: 'system', content: SYSTEM_PROMPT_ADAPTIVE_LEARNING_SPECIALIST },
    { role: 'user', content: userMessageContent },
  ];

  console.log(`Requesting adaptive learning recommendations for user: ${userContext.experience} learner.`); // Avoid logging PII

  const response: LlmResponse = await getOpenAiChatCompletion({
    messages,
    model: config.openaiModel, // Or a model specialized for this
    temperature: 0.6,
    response_format: { type: 'json_object' },
  });

  if (!response.success || !response.content) {
    console.error('Error in OpenAI adaptive learning recommendations:', response.error);
    return null;
  }

  try {
    const rawResult = JSON.parse(response.content);
    const validatedResult = AdaptiveLearningRecommendationSchema.parse(rawResult);
    
    console.log(`Adaptive learning recommendations generated and validated.`);
    return validatedResult;
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.error('Zod validation error for AdaptiveLearningRecommendation:', error.errors);
    } else {
      console.error('Error parsing JSON response for AdaptiveLearningRecommendation from OpenAI:', error);
    }
    console.error('Original OpenAI content that failed parsing/validation:', response.content);
    return null;
  }
}
